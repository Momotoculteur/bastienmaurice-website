# Introduction à GitlabCI

Bastien MAURICE
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->
---
<div style="text-align: left;">

## Introduction 

GitLab CI/CD est un outil d'intégration continue et de livraison continue (CI/CD) intégré à GitLab.  
Il permet d'automatiser les processus de test, de build et de déploiement du code à chaque modification, améliorant ainsi la qualité et la rapidité de livraison des projets logiciels.

</div>
---

<div style="text-align: left;">

## Pipeline 

Un pipeline est une série de tâches (ou jobs) exécutées dans un ordre précis lorsque certains événements se produisent, comme un push sur la branche main. Un pipeline peut contenir plusieurs stages (étapes) tels que :

- **build** : compilation du code
- **test** : exécution des tests
- **deploy** : déploiement de l'application
</div>
---

<div style="text-align: left;">

## Fichier .gitlab-ci.yml

Pour configurer GitLab CI/CD, tu dois créer un fichier nommé .gitlab-ci.yml à la racine de ton dépôt.  
Ce fichier contient la configuration des pipelines : les stages, les jobs, et comment chaque job doit s'exécuter. Voici un exemple simple :

<pre><code data-trim data-noescape>
stages:
  - build
  - test
  - deploy

build_job:
  stage: build
  script:
    - echo "Building the project..."

test_job:
  stage: test
  script:
    - echo "Running tests..."

deploy_job:
  stage: deploy
  script:
    - echo "Deploying the project..."

</code></pre>

</div>
---

<div style="text-align: left;">

## Jobs

Un job est une tâche spécifique qui s'exécute dans un pipeline. Chaque job appartient à un stage. Par exemple, dans le fichier ci-dessus :

- **build_job** compile le projet
- **test_job** exécute des tests
- **deploy_job** déploie l'application

</div>
---

<div style="text-align: left;">

## Exécution d'un Pipeline

Le pipeline est déclenché automatiquement quand tu pousses des modifications dans GitLab (ou sur certains événements comme les merges, les tags, etc.).  
GitLab exécute les jobs dans des conteneurs Docker (ou des runners configurés).

</div>
---

<div style="text-align: left;">

## GitLab Runners

Un GitLab Runner est un programme qui exécute les jobs définis dans ton fichier .gitlab-ci.yml.  
Il peut être hébergé localement ou sur un service externe (Docker, Kubernetes, etc.).  
GitLab fournit des runners partagés pour démarrer rapidement.


</div>
---

<div style="text-align: left;">

## Variables CI/CD

GitLab permet de définir des variables CI/CD qui peuvent être utilisées dans les pipelines pour stocker des secrets (clés API, tokens) ou des paramètres spécifiques.

<pre><code data-trim data-noescape>
deploy_job:
  stage: deploy
  script:
    - echo "Deploying on $ENVIRONMENT"
  variables:
    ENVIRONMENT: production
</code></pre>

</div>
---

<div style="text-align: left;">

## Artifacts et Caches

Les jobs peuvent produire des artifacts (fichiers générés, rapports de tests) et utiliser des caches pour stocker des dépendances ou des fichiers qui accélèrent les pipelines.

<pre><code data-trim data-noescape>
build_job:
  stage: build
  script:
    - echo "Building..."
  artifacts:
    paths:
      - build/
</code></pre>

</div>
---

<div style="text-align: left;">

## Conditions et Stratégies

Tu peux conditionner l'exécution des jobs en fonction de branches, de variables ou de règles spécifiques.

<pre><code data-trim data-noescape>
deploy_job:
  stage: deploy
  script:
    - echo "Deploying to production"
  only:
    - main
</code></pre>

Cela indique que le job de déploiement ne s'exécute que sur la branche main.


</div>
---

<div style="text-align: left;">

## Récap

GitLab CI/CD est très puissant pour automatiser tout le processus de développement, du test au déploiement. Le fichier .gitlab-ci.yml te permet de configurer ces automatisations à l'aide de jobs, de stages et de runners, tout en tirant parti des variables, des artifacts et des conditions pour un pipeline flexible.
</div>
