# Kubernetes Resources

Bastien MAURICE
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---


# Storage

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---


## Volumes
S'attache à un pod
Peut en avoir plusieurs

**Persistent volumes**  
External storage pour un pod

**Ephemeral volume**  
Storage qui vie tant que le pod existe 

**Projected volume**  
Map plusieurs volumes exitant dans un seul même directory

**Volume snapshot**  
Créer une save à un instant T, pour rollback, backup.. 

Type d'un volume : 
- Via cloud (AWS ElasticBlockStore, AzureDisk, GCEPersistentDisk.. )
- emptyDir
- PVC
- NFS
- ConfigMap
- CephFS
- ...

---

## Persistent Volume Claim - PVC

Utilisé pour découplé le PV d'un Pod
Le PVC demande un type de storage pour un Pod
Une fois les critères match, le PV est demandé et attribué

---

## Persistent Volume - PV

Stockage provisionné dans le cluster par un Admin, ou automatiquement par une StorageClass

Le PV s'attache exclusivement au Pod via un PVC, et non directement

PVC similaire à une requête de ressources d'un Pod, à un Noeud  

- Le pod consume des ressources du Node (min memory ou CPU, etc)
- Le PVC consume des ressources au PV (min d'espace de stockage, etc)

---

## Storage Class

C'est une façon de définir un type de storage, qui réfère à un provisioner

Défini les options suivantes :
- Provisioner : quel storage (AWS EFS, EBS, etc)
- Paramètres : quel type de storage (taille de l'EFS/EBS, type de machine, etc)
- ReclaimPolicy : comment gérer le cycle de vie une fois le pod est kill

---

## ConfigMap

Stocke des données sous clée-valeur
Doit être non confidentiel

Consumé par les Pods :
- via viariable d'environnement
- via arguments de CLI
- monté dans le pod en tant que volume


---

# Services

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

## Services

Permet d'attach une IP static et un DNS pour une liste de Pods
Sert de load-balancer entre les pods


Différents types

- ClusterIP : par défault, forward le traffic de façon random sur n'importe quel Pod avec un port
- Headless : envoi le traffic sur un Pod spécifique (Pod StatefullSet, Ex: Database)
- NodePort : service externe, permet d'utiliser l'adresse IP du Worker Node
- LoadBalancer : comme NodePort, le traffic venant d'un Load Balancer externe fourni par un Cloud Provider
- ExternalName: service spécial qui utilise des DNS names à la place de selecteurs


---

## Services - ClusterIP

Traffic interne exclusivement
Le traffic externe ne suivra pas au Service
Randomize la charge entre les différents Pods
Peut être target depuis un autre worker node

Utilisation ?
- Debug
- Test
- Internal traffic
- Internal Dashboards


---

## Services - NodePort

Expose un port de la VM qui run le Pod sur lequel le service tourne
Peut eventuellement manager du traffic externe au Pod
Pas de load balancer externe, donc utilisation pour un seul service Kube, et donc pas pour une production

---

## Services - LoadBalancer

Permet d'utiliser un load balancer externe, managé par un Cloud Provider par exemple

Peut être utiliser en Prod
Mais on recommande l'utilisation d'un Ingress plutôt


---

## Services - Headless

Service sans ClusterIP adress  
Ne donne pas de load balance ni de proxy  
Utile pour des app Statefull (StatefulSet) car target un pod spécifique

---

## Services - ExternalName

Comme le type de service ClusterIP
Ne retourne pas une adresse IP static, mais un record CNAME

Canonical Name (CNAME): est une ligne qui map un nom de domaine (un alias) à un autre nom (CNAME)
Ex: ma-database.com

---

# Ingress

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

## Ingress

Expose les routes HTTP et HTTPS à l'extérieur du cluster, aux services dans le cluster
Le traffic est configuré avec des rules définie dans la ressource de l'Ingress

Permet de convertir un domaine custom via SSL à un service qui tourne dans le cluster

---

## Ingress Controller

Un Ingress à besoin d'un Ingress Controller

Ex: Ngix, Traefik, Cloud Provider, etc.

---

## DNS

Domain Name System

Resolve un nom de domaine à une adresse IP

Service Kube -> IP d'un pod


---

## CoreDNS

DNS par default pour Kubernetes

Permet la communication au sein du cluster
Permet aux Services et Pods d'avoir des Fully Qualified Domain Name (FQDN)

FQDN : nom de domaine qui spécifie l'exacte location dans la hierarchie, appelé aussi *domaine absolue*


---

## Load Balancer


Décide comment distribuer le traffic à des cibles multiples
Basé sur des rules

---

## Probes

Utilisé par Kubelet pour detecter l'état d'un container


Liveness Probe
- Permet de savoir quand restart un container 

Ex: cas de crash, etc.


Readiness Probe
- Permet de savoir quand un container est prêt pour accepter du traffic

Ex: Un backend qui fourni une API, temps d'init de l'app etc

Startup Probe
- Permet de savoir quand un container applicatif à démarré

Cf : Les deux première probes sont désactivé le temps que celle-ci soit OK (pour ne pas interférer)


---

## Service Mesh

Permet la communication entre application pour les architectures micro-services

Infrastructure layer qui provide :
- Reliabilité: traffic management, retries, load balancing
- Observabilité: metrics, traces
- Security: idendité, TLS certification

Installation dans chaque Pod en tant que proxy (sidecar pattern )
Le proxy est géré par un Service Mesh Controle Plane

Ex: Istio, Kuma, Linkerd, Consul

Pas obligatoire, mais recommandé pour la production

---

