# Kubernetes
## Orchestration de container

Bastien MAURICE
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

## Rappel Docker

Creation d'image qui embarque une application  
Permet d'être deployer n'importe ou, qu'importe l'environnement


---
## Kubernetes intro

Système hautement résilient et scalable 

- Application basé sur des images Docker
- Suis les pic et les baisses de traffic/charge
- Système capable

---

# Distribution

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

<div style="text-align: left;">

## Distribution Kubernetes

Permet de tester des dévelopements rapide en local

Minikube
- Run une VM, Docker en tant que container layer
- Cross platform
- Single node (control plane)

K3s
Version allégé de k8s
But d'avoir un k8s de prod pour de l'IOT, edge service et bare metal
- plus difficile à setup
- pas de kubelet, il est sur la machine hôte directement
- c'est donc l'hôte qui gère le mecanisme de scheduling pour les containers
- k3s utilise kube-proxy pour proxy le réseau entre les nodes (k8s utilise kube-proxy pour proxy le réseau d'un conteneur individuel)
- Moins de surface d'attaque donc plus sécure

K3D
Wrapper pour kun un k3s dans un container docker
Permet d'avoir un k3s en single ou multi node plus rapidement avec moins de setup, en ayant de la haute disponibilité

Kind
(Kubernetes in Docker)
Docker containers as Nodes

MicroK8S
Installé via le package manger de Canonical (Ubuntu) : Snap
multi platform, multi node
Fonctionne avec des plugins/addons (ajouter helm, coredns, rbac, ingress, etc)

|Props|Minikube|MicroK8s|K3S|K0S|kind|
|---|---|---|---|---|---|
|Facilité d'utilisation|⭐⭐⭐⭐⭐|⭐⭐⭐|⭐⭐⭐⭐|⭐⭐|⭐⭐⭐⭐|
|Simple binaire|❌|❌|✅|✅|✅|
|Stockage par defaut|✅|❌|✅|❌|✅|
|DNS par defaut|✅|❌|✅|✅|✅|

</div>

Dev purpose
Minikube (VM) plus simple à setup et utiliserrrr
Kind (Plus rapide que minikube, container)

Prod purpose
K3s/K3d (by Rancher) utilise pour env avec ressources limités
MicroK8S (need snap pour être install) utilisation modulaire

✅

❌

---

# Runtime

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

## Container Runtime Interfaces

**Orchestration**  
System d'orchestrateur, qui utilise un CRI

Ex:
- Docker
- Kubernetees

**CRI**  
Te permet de faire tourner ton container runtime préféré pour push/pull image, superviser les containers, etc

Ex:
- Containerd
- CRI-O

**Open Container Initiative (OCI) Runtimes**  
Permet de créer et faire tourner tes runtimes

Ex:
- Native runtimes : runC, Crun
- Sandboxed/Virtualized Runtime: gvisio, nabla-containers, Kata-containers

Majeure différence entre native et virtuel est l'*isolation*   
Plus de sécurité pour les virtuels

---

## CRI

ContainerD
Docker container runtime, donné à CNCF

CRI-O
Alternative plus légère de ContainerD
Implementation du Kubernetes CRI pour activer l'Open Container Initiative (OCI) compatible runtime
Permet à Kube d'utilisern n'importe quel OCI compliant runtime pour run les Pods
Actuellement runc et KataContainerss

---

## Container Storage Interface (CSI)
CSI standardize comment les Container Orchestrator System (COS) accèdent aux différents provider de stockage


COS: Mesos, Kubernetes, Docker Swarm

CSI: Azure Disk, AWS EBS, Openstack Cinder, GCP Storage, NetApp Trident...

---

## ETCD

Key-value database distribué, run sur le Control Plane Node

En cas de pépins : 
- Kube save tout les states de ses ressources dans etcd
- Les données d'application dans un Persistent Volume (PV)

---

## Container Networking Interface - CNI

Specification (open standard) pour écrire des plugins pour configurer les interfaces réseaux aux containers Linux

---

# Autoscaling

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

## Pod based scaling - VPA

Vertical Pod Autoscaler

Ajuste CPU et Memory à la demande
Augmente/Diminue les ressources au niveau du Pod

---

## Pod based scaling - HPA

Horizontal Pod Autoscaler

Ajoute des pods à la demande


---

## Node Based Scaling - Cluster Autoscaler

Ajoute automatiquement des Nodes à la demande, selon les requêtes de l'ensemble des Pods

Le scheduler surveille les Pods en attente de spawn, et suggère si il pop sur un nouveau node

Utilise seulement les requests/limits de CPU/Memory
Pas le plus efficace, peu avoir un cluster 'full' mais peu utilisé en réalité par l'usage courant des ressources

Algo lent pour réagir

---

## Node Based Scaling - Karpenter

Se veut plus opti que l'autoscaler de base, et donc moins couteux
Moins de délais pour l'up/down scaling de nodes


JIT mode
Optimize à la volé le type de machine
