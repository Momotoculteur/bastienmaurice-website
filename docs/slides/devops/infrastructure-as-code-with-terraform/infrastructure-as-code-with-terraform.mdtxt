# Infrastructure as Code avec Terraform
Bastien MAURICE
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->
---
<div style="text-align: left;">

## Infra de base

Création à la main via le portal management

Quid pour une infra plus complexe ?
- Si on a beaucoup de ressources
- Si on gère plusieurs projets
- Avoir une politique d'accès aux ressources
- Suivi du FinOps ? (gérer les ressources utilisés de celles outdated)
</div>

---
<div style="text-align: left;">

## Infra as Code

Définir son infra en code  
Dispo sur un répôt Git
<br>

Atouts : 
- Vision clair de ce qui tourne et sur quelle environnement
- Changelog des ressources crée, détruite ou mis à jour entre chaque commit
- Aucun soucis pour du collaboratif si le répôt est bien structuré
- Meilleure suivi/gestion des ressourcs pour 

</div>

---
<div style="text-align: left;">

## IaC Tools comparaison
Liste des principaux IaC framework  
Liste les configurations les plus communes et/ou par defaut
Cf. 

✅ On peut combiner les outils ensemble.
Exemple, création d'un serveur sous Terraform, et configuration de celui-ci via Ansible

</div>

---

<div style="text-align: left;">

## IaC Tools comparaison
### Configuration Management vs Provisioning

Configuration management
- Consiste à installer et manager des softs sur des serveurs déjà existants  

❗❗ Peut faire du provisioning à moindre degrés

Provisioning
- Fait pour créer les serveurs eux-mêmes. Database, load-balancer, storage, etc.

❗❗ Peut faire de la configuration moins facilement via des scripts sur les serveurs fraichement crées


</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---

<div style="text-align: left;">

## IaC Tools comparaison
### Mutable Infrastructure vs Immutable Infrastructure

Mutable: lancer une même commande effectue une 2nd fois des changes
</br>
Immutable: lancer x fois une commande donne le même résultat

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---

<div style="text-align: left;">

## IaC Tools comparaison
### Procedural vs Declarative

Le style procéduriale décrit étape par étape ce que tu souhaites avoir  
Besoin de savoir ce qui est déployé à l'instant T, et de lancer les commandes dans le bon ordre  

</br>

Le style déclaratif décrit ton souhait final. Tu ne te soucis pas de comment y arriver  
Notion de state qui capture l'état courant de l'infrastructure  

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---

<div style="text-align: left;">

## IaC Tools comparaison
### General-purpose language versus domain-specific language

GPL: Javascript/Typescript, Python, Go, C#, Java...
DSL: HCL, Puppet Language, YAML, JSON...

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---

<div style="text-align: left;">

## IaC Tools comparaison
### Master vs Masterless

Master
- Besoin d'avoir un agent qui run. 
- Le client discute avec le master 
- Le master applique les changes demandés

Masterless
- Moins d'extra infra à gérer
- Donc moins de maintenance

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---


<div style="text-align: left;">

## IaC Tools comparaison
### Agent vs Agentless

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---
<div style="text-align: left;">

## IaC Tools comparaison
### Paid versus free offering

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---

<div style="text-align: left;">

## IaC Tools comparaison
### Large Community vs Small Community

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---
<div style="text-align: left;">

## IaC Tools comparaison
### Mature vs Cutting Edge

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---
<div style="text-align: left;">

## Combiner les tools
### Provisionning + Configuration management


</div>

![provisioning-configuration-management](./img/provisioning-configuration-management.png)<!-- .element: class="r-stretch" -->

---

<div style="text-align: left;">

## Combiner les tools
### Provisionning + Server templating


</div>

![provisioning-server-templating](./img/provisioning-server-templating.png)<!-- .element: class="r-stretch" -->

---
<div style="text-align: left;">

## Combiner les tools
### Provisionning + Server templating + Orchestration


</div>

![provisioning-server-templating-orchestration](./img/provisioning-server-templating-orchestration.png)<!-- .element: class="r-stretch" -->

---
<div style="text-align: left;">

## Terraform le GOAT ?

Résumé:
- Open source 
- Grande communauté
- Tool de provisioning
- Infra immutable
- Codebase mature
- Language déclaratif
- Masterless et Agentless
- Multi cloud

</div>

---

# Let's go pour Terraform !
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->