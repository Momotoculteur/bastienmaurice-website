# Infrastructure as Code avec Terraform
Bastien MAURICE
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->
---
<div style="text-align: left;">

## Infra de base

Cr√©ation √† la main via le portal management

Quid pour une infra plus complexe ?
- Si on a beaucoup de ressources
- Si on g√®re plusieurs projets
- Avoir une politique d'acc√®s aux ressources
- Suivi du FinOps ? (g√©rer les ressources utilis√©s de celles outdated)
</div>

---
<div style="text-align: left;">

## Infra as Code

D√©finir son infra en code  
Dispo sur un r√©p√¥t Git
<br>

Atouts : 
- Vision clair de ce qui tourne et sur quelle environnement
- Changelog des ressources cr√©e, d√©truite ou mis √† jour entre chaque commit
- Aucun soucis pour du collaboratif si le r√©p√¥t est bien structur√©
- Meilleure suivi/gestion des ressourcs pour 

</div>

---
<div style="text-align: left;">

## IaC Tools comparaison
Liste des principaux IaC framework  
Liste les configurations les plus communes et/ou par defaut
Cf. 

‚úÖ On peut combiner les outils ensemble.  
Exemple, cr√©ation d'un serveur sous Terraform, et configuration de celui-ci via Ansible

</div>

---

<div style="text-align: left;">

## IaC Tools comparaison
### Configuration Management vs Provisioning

Configuration management
- Consiste √† installer et manager des softs sur des serveurs d√©j√† existants  

‚ùó‚ùó Peut faire du provisioning √† moindre degr√©s

Provisioning
- Fait pour cr√©er les serveurs eux-m√™mes. Database, load-balancer, storage, etc.

‚ùó‚ùó Peut faire de la configuration moins facilement via des scripts sur les serveurs fraichement cr√©es


</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

---

<div style="text-align: left;">

## IaC Tools comparaison
### Mutable Infrastructure vs Immutable Infrastructure

**Mutable**: lancer une m√™me commande effectue une 2nd fois des changes
</br>
**Immutable**: lancer x fois une commande donne le m√™me r√©sultat

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->


---

<div style="text-align: left;">

## IaC Tools comparaison
### Procedural vs Declarative

Le style **proc√©duriale** d√©crit √©tape par √©tape ce que tu souhaites avoir  
Besoin de savoir ce qui est d√©ploy√© √† l'instant T, et de lancer les commandes dans le bon ordre  

</br>

Le style **d√©claratif** d√©crit ton souhait final. Tu ne te soucis pas de comment y arriver  
Notion de state qui capture l'√©tat courant de l'infrastructure  

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->


---

<div style="text-align: left;">

## IaC Tools comparaison
### General-purpose language versus domain-specific language

**GPL**: Javascript/Typescript, Python, Go, C#, Java...  
**DSL**: HCL, Puppet Language, YAML, JSON...

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->


---

<div style="text-align: left;">

## IaC Tools comparaison
### Master vs Masterless

**Master**
- Contient le state de l'infrastructure
- Le master applique les changes demand√©s par le client, aux Agents
- Besoin d'avoir un agent qui run. 
- Le client discute avec le master 

**Masterless**
- Moins d'extra infra √† g√©rer
- Donc moins de maintenance

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->


---


<div style="text-align: left;">

## IaC Tools comparaison
### Agent vs Agentless

Un agent est responsable d'installer la derni√®re configuration sur chacun des serveurs  
Ajoute de la maintenance suppl√©mentaire

</div>

![infrastructure-as-code-tools](./img/infrastructure-as-code-tools.png)<!-- .element: class="r-stretch" -->

---
<div style="text-align: left;">

## IaC Tools comparaison
### Mature vs Cutting Edge

La maturit√© d'un projet est d√©termin√© par :
- l'anciennet√©
- l'usage apporte des best practices, pattern, etc


</div>

![maturity-iac-tools](./img/maturity-iac-tools.png)<!-- .element: class="r-stretch" -->

<div style="text-align: left;">
</div>
---
<div style="text-align: left;">

## Combiner les tools

Chaque outils √† ses forces & faiblesses  
Selon le cas d'usage, il se peut d'employer plusieurs outils √† la fois

</div>
---
<div style="text-align: left;">

## Combiner les tools
### Provisionning + Configuration management

**Ex: Terraform + Ansible**  
Terraform: Deploy le network, database, serveurs, etc.  
Ansible: Deploy nos applications sur les serveurs (approche mutable)  

</div>

![provisioning-configuration-management](./img/provisioning-configuration-management.png)<!-- .element: class="r-stretch" -->

---

<div style="text-align: left;">

## Combiner les tools
### Provisionning + Server templating

**Ex: Terraform + Packer**  
Terraform: Cr√©ation de VMs  
Packer: Packager une application et deploy sur la VM via une image (approche immutable)  


</div>

![provisioning-server-templating](./img/provisioning-server-templating.png)<!-- .element: class="r-stretch" -->

---
<div style="text-align: left;">

## Combiner les tools
### Provisionning + Server templating + Orchestration

**Ex: Terraform, Packer, Docker & Kubernetes**  
Packer: VM image qui contient docker + kubernetes  
Terraform: cr√©ation de cluster de serveurs  


</div>

![provisioning-server-templating-orchestration](./img/provisioning-server-templating-orchestration.png)<!-- .element: class="r-stretch" -->

---
<div style="text-align: left;">

## Terraform le GOAT ?

R√©sum√©:
- Open source 
- Grande communaut√©
- Tool de provisioning
- Infra immutable
- Codebase mature
- Language d√©claratif
- Masterless et Agentless
- Multi cloud

</div>

---

# Let's go pour Terraform !
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---
<div style="text-align: left;">

## La base de Terraform

Terraform utilise son propre language le **HCL** (ressemble √† du JSON)

1. On cr√©e des ressources. 
2. TF calcule l'odre des d√©pendances √† appliquer
3. Terraform 'sauvegarde' l'√©tat final de l'infra dans un fichier **tf.state**

</div>

![terraform-workfllow](./img/terraform-workfllow.png)

---

<div style="text-align: left;">

## Best practices

Le **tf.state** contient toute la structure de l'infrastucture, celui-ci est donc critique si il est supprim√© ou corrompu (ex: un apply qui √† √©t√© int√©rompu, 2 apply qui se font en m√™me temps...)  
<br>
Ce fichier contient les infos en clair. Notemment des tokens, password, etc.  
üö® Fichier √† ne jamais commit sur Git !!  
<br>
Pour g√©rer au mieux le travail collaboratif, et la r√©silience de ce fichier, on pr√©f√®re utiliser un **remote backend**  
<br>
Pour les op√©rations critiques (cf terraform apply) on met en place du **locking**, permettant de faire celles-ci en s√©quentiel  
<br>
A privil√©gier les **shorts term credentials** vs long term (Ex: login sso vs accesKey/secretKey)

</div>

---

<div style="text-align: left;">

## Modules

Un module est une sorte d'extention  
Il regroupe du code terraform pour faciliter certaines op√©rations  
Ils peuvent √™tre cr√©er par sois m√™me, ou m√™me distribu√© par la communaut√© en open source  

</div>

---

<div style="text-align: left;">

## Les principales commandes

Les main: 
- terraform init
- terraform plan
- terraform apply

<br><br>

Les secondaires:
- terraform fmt
- terraform validate

</div>

---

<div style="text-align: left;">

## Commande annexes 

- terraform graph
- terraform taint
- terraform import
- terraform workspace

</div>

---
# Un peu de code :)
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---
<div style="text-align: left;">

## Terraform - Providers

```terraform
# providers.tf
terraform {
    required_providers {
        aws = {
            source  = "hashicorp/aws"
            version = "5.13.1"
        }
    }
}
```

</div>
---

<div style="text-align: left;">

## Terraform - Providers multiple

<pre class="stretch"><code data-trim data-noescape>
terraform {
    required_providers {
        aws = {
            source  = "hashicorp/aws"
            version = "5.13.1"
        }
    }
}

provider "aws" {
    region = "eu-west-3"
}

provider "aws" {
    alias = "acm_provider"
    region = "us-east-1"
}

resource "aws_acm_certificate" "certificate" {
    provider = aws.acm_provider
    ...
}
</code></pre>

</div>
---

<div style="text-align: left;">

## Terraform - Remote backend

```terraform []
# providers.tf
terraform {
    backend "s3" {
    bucket = "bastienmaurice-website-infra-state"
    key    = "terraform/state/terraform.tfstate"
    region = "eu-west-3"

    dynamodb_table = "bastienmaurice-website-infra-state"
    encrypt        = true
  }
}
```

</div>
---

<div style="text-align: left;">

## Terraform - Locals

```terraform []
# locals.tf
locals {
    toto = "tata"
}
```

</div>
---
<div style="text-align: left;">


## Terraform - Cr√©ation d'une ressource

```terraform []
# bucket_s3.tf
resource "aws_s3_bucket" "bucket" {
  bucket = "mon-bucket"
}
```

</div>