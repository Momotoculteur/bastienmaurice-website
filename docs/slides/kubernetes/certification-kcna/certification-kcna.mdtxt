# Kubernetes and Cloud Native Associate (KCNA)

Bastien MAURICE
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->
---
<div style="text-align: left;">

## Hello ! 

</div>


<img src="../../../ressource/img/profile/photo.jpeg" style="border-radius: 50%; width: 200px;" alt="Photo de profil" />

2 ans DevOps Engineer - Thales<br>
2 ans Platform Engineer - Betclic<br>
Actuellement Platform Engineer - Floa

</div>
---
<div style="text-align: left;">

## Certification liste

**Kubernetes and Cloud Native Associate (KCNA)**  
Kubernetes and Cloud Native Security Associate (KCSA)  

Certified Kubernetes Application Developer (CKAD)  
Certified Kubernetes Administrator (CKA)  

Certified Kubernetes Security Specialist (CKS)  

</div>
---

<div style="text-align: left;">

## Examen

- QCM de 60 questions

- 75% de bonne réponses pour valider

- Durée de 90 minutes

- Pas de malus

- Valide pour 2 années

</div>

---

<div style="text-align: left;">

## Objectifs de la journée

- Comprendre Kubernetes, son architecture et ses fondamentaux
- Se familiariser avec l’orchestration de conteneurs
- Découvrir l’architecture Cloud Native et les bonnes pratiques
- Comprendre l’observabilité et le delivery dans l’écosystème Kubernetes
- Se préparer à la certification KCNA (Kubernetes & Cloud Native Associate)

</div>
---

<div style="text-align: left;">

## Plan de formation (7h)

| Domaine                           | % de l'examen | Temps alloué |
| --------------------------------- | ------------- | ------------ |
| Kubernetes Fundamentals           | 46%           | 3h13         |
| Container Orchestration           | 22%           | 1h32         |
| Cloud Native Architecture         | 16%           | 1h07         |
| Cloud Native Observability        | 8%            | 34min        |
| Cloud Native Application Delivery | 8%            | 34min        |

</div>

---

# Kubernetes Fundamentals
#### Resources, Archi, API, Containers, Scheduling...

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

## Accronymes communs

- K8s = Kubernetes
- CNCF = Cloud Native Computing Foundation
- NetPol = Network Policies
- PV = Persistent Volumes
- PVC = Persistent Volume Claims
- CSI = Container Storage Interface
- CNI = Container Network Interface
- CI/CD = Continuous Integration & Continuous Deployment
- RBAC = Role Based Access Control
- OCI = Open Container Initiative
- CRI = Container Runtime Interface
- SMI = Service Mesh Interface
- SLO = Service Level Objectives
- SLI = Service Level Indicators
- SLA = Service Level Agreements

---
<div style="text-align: left;">

## Qu'est-ce que Kubernetes ?

- Plateforme d'orchestration de conteneurs
- Initialement développé pabr Google, maintenant un projet de la CNCF
- Automatise :
  - Le déploiement
  - Le scaling
  - La gestion du cycle de vie des conteneurs
</div>
---
<div style="text-align: left;">

## Architecture de Kubernetes - TODOOOOOOO

- Control Plane : gère l'état du cluster
  - API Server : point d'entrée REST
  - etcd : base de données clé-valeur
  - Scheduler : planifie les pods
  - Controller Manager : assure la cohérence

</div>

---
<div style="text-align: left;">

## Architecture de Kubernetes - TODOOOOOOO

- Node : éxécute les conteneurs
  - kubelet : agent du noeud
  - container runtime : containerd/Docker
  - kube-proxy : gère le réseau


</div>

---

## Rappels Docker & container

TODO

---

<div style="text-align: left;">

## Pods - TODOOOOOOO

**Pod = plus petite unité d’exécution**

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
    - name: nginx
      image: nginx
```

</div>

---

<div style="text-align: left;">


## Replicaset - TODOOOOOO




</div>

---
<div style="text-align: left;">

## Deployments - TODOOOOOOO

**Deployment = objet pour gérer les Pods**


```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: web
        image: myimage:v1
```

</div>

---
<div style="text-align: left;">

## Stateless vs Stateful - TODOOOOO

</div>
---

<div style="text-align: left;">

## Namespaces - TODOOOOOO

Permet d'isoler les ressources dans un cluster Kube

Peut être organisé selon les projets, départements, ou tout autre découpage

**Namespace de base**   
- default: pop les app qui sont deploy sans ns particulier  
- kube-system: namespace dédié aux objets system kube. A ne pas utiliser  

**Certains objets sont global au cluster**  
- StorageClass, Nodes, PersistentVolumes

Les noms doivent être unique dans un même namespace
 
</div>
---

<div style="text-align: left;">

## Services et mise en réseau

- ClusterIP : communication interne
- NodePort : expose un port sur chaque noeud
- LoadBalancer : provisionne un LB (cloud)

```yaml
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30036
```
</div>


---

<div style="text-align: left;">

## Volumes et persistance

- Les Pods sont éphémères !
- Types : emptyDir, hostPath, persistentVolumeClaim

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi
```

</div>

---

<div style="text-align: left;">

## RBAC et sécurité de base

- ServiceAccounts : identités applicatives
- RBAC : Role, ClusterRole, Binding

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
```

</div>

---

## KubeCli

---

<div style="text-align: left;">

## Questions : Kubernetes Fundamentals

1. Quel composant stocke l'état du cluster ?

2. Quelle est la différence entre un Pod et un Deployment ?

3. Quel type de Service dois-je utiliser pour exposer publiquement un Pod ?

4. Quelle commande permet d'appliquer un fichier YAML ?

</div>

---

# Container Orchestration 
#### Container, Runtime, Security, Networking, Service mesh, Storage...

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->


---
<div style="text-align: left;">

## Helm

- Gestionnaire de packages Kubernetes

- Concept de "chart"

```bash
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install my-release bitnami/nginx
```

```yaml
replicaCount: 2
image:
  repository: nginx
  tag: latest
```

</div>

---

<div style="text-align: left;">

## Jobs & CronJobs

```yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            command: ["echo", "Hello"]
          restartPolicy: OnFailure
```
</div>

---
<div style="text-align: left;">

## Autoscaling

Permet d'ajuster à la demande, sans aucune intervention manuelle, les ressources en CPU/RAM  

S'adapte selon le traffic users, selon des règles & events

</br>

**Pod-based scaling**  
- HorizontalPodAutoscaler
  - Ajoute des pods pour suivre la demande
- VerticalPodAutoscaler
  - Resize les pods pour davantage de CPU & mémoire

**Node-based scaling**  
- Cluster Auto Scaling (Cluster Autoscaler, Karpenter...)
  - Ajoute ou supprime des noeuds selon la demande
</div>

---

<div style="text-align: left;">

## Custom Resource Definitions (CRDs)

- Permet d'étendre l’API Kubernetes

- Exemple : cert-manager, Prometheus Operator

```yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: monitoring.coreos.com/v1
```

</div>

---

<div style="text-align: left;">

## Questions : Orchestration

1. Qu'est-ce qu'un chart Helm ?

2. Différence entre Job et CronJob ?

3. Pourquoi utiliser un CRD ?

</div>

---


# Cloud Native Architecture

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->
---

<div style="text-align: left;">

## Microservices - Définition - TODOOOOOO

Chaque service = conteneur indépendant



</div>

---

## Microservices - Bonne pratique - TODOOOOOOO

Bonne pratique : ConfigMaps, Secrets

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mon-configmap
  namespace: default
data:
  APP_ENV: "production"
  APP_DEBUG: "false"
  DATABASE_URL: "postgres://user:pass@db:5432/ma_db"
```

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mon-secret
  namespace: default
type: Opaque
data:
  DB_USER: dXNlcg==       # "user" encodé en base64
  DB_PASSWORD: cGFzc3dvcmQ=  # "password" encodé en base64
```
</div>

---

<div style="text-align: left;">

## Service Mesh

Istio, Linkerd

Gestion :

Routage

Métriques

Sécurité (mTLS)
</div>

---

<div style="text-align: left;">

## Questions : Architecture

1. Quelle est la responsabilité d'un Service Mesh ?

2. Quelle différence entre Secret et ConfigMap ?

3. Quel composant rend un conteneur stateless ?

</div>

---


# Cloud Native Observability
#### Telemetry, Prom, Cost management...

<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->
---

<div style="text-align: left;">

## Prometheus & Grafana

- Pull de métriques

- Alerting possible

- Dashboards via Grafana


(ajout de schéma)

</div>

---

<div style="text-align: left;">

## Logging et Tracing

Fluentd, Loki pour logs

Jaeger pour traces

OpenTelemetry : standard d’instrumentation

</div>

---

<div style="text-align: left;">

## Questions : Observabilité

1. Quelle est la différence entre Prometheus et Grafana ?

2. Quel outil permet de centraliser les logs ?

3. Quel protocole est utilisé pour les traces distribuées ?

</div>

---

# Cloud Native Application Delivery
#### Apps fundamentals, GitOps, CI/CD...kcna 
<!-- .slide: data-background="#009485" -->
<!-- .slide: class="center" -->

---

<div style="text-align: left;">

## CI/CD et GitOps

- Jenkins, GitLab CI, ArgoCD

- Approche déclarative avec Git comme source de vérité

```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: myapp
spec:
  source:
    repoURL: https://github.com/me/app
```

</div>

---

<div style="text-align: left;">

## Sécurité de livraison 

- Admission Controller

- OPA, Gatekeeper

- Scan d’images avec Trivy, Snyk

</div>

---

<div style="text-align: left;">

## Questions : Delivery

1. Qu'est-ce que GitOps ?

2. Quelle est la différence entre un pipeline CI et CD ?

3. Quel outil permet de scanner une image de conteneur ?

</div>

---

<div style="text-align: left;">

## Quizz - Examen blanc

</div>

---

## Conseils

- Un batch de 60 questions gratuit sur app.exampro.co

- D'autres batchs sont dispo payant sur Udemy

---